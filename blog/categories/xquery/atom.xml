<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: XQuery | Jon's Blog]]></title>
  <link href="http://JonCook.github.com/blog/categories/xquery/atom.xml" rel="self"/>
  <link href="http://JonCook.github.com/"/>
  <updated>2014-01-13T23:36:36+01:00</updated>
  <id>http://JonCook.github.com/</id>
  <author>
    <name><![CDATA[Jon Cook]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Useful XQuery]]></title>
    <link href="http://JonCook.github.com/blog/2012/03/15/useful-xquery/"/>
    <updated>2012-03-15T13:58:00+01:00</updated>
    <id>http://JonCook.github.com/blog/2012/03/15/useful-xquery</id>
    <content type="html"><![CDATA[<p>As I mentioned in my previous <a href="http://joncook.github.com/blog/2012/02/12/evaluating-mark-logic-xquery-performance/">blog post</a> I&rsquo;ve recently been doing some work building RESTFul API&rsquo;s backed by a Mark Logic XML Content Store utilising XQuery for document retrieval which has led me come up with the following useful snippets of XQuery that I thought I would share. They could easily be altered to work with slightly different requirements.</p>

<h3>List all the document uris in database</h3>

<hr />

<p><div><script src='https://gist.github.com/2039314.js?file=list_all_document_uris.xqy'></script>
<noscript><pre><code>for $i in collection() return document-uri($i)</code></pre></noscript></div>
</p>

<h3>List all the document uris in database based on some criteria</h3>

<hr />

<p>In this case we are restricting the documents that exist in the /sitemap/ directory and end with sitemap.xml and do not contain archive in the uri
<div><script src='https://gist.github.com/2039314.js?file=list_document_uris_where_uri_matches_criteria.xqy'></script>
<noscript><pre><code>for $d in xdmp:directory(&quot;/sitemap/&quot;, &quot;infinity&quot;)
  where fn:ends-with(fn:document-uri($d), &quot;sitemap.xml&quot;)
  and not fn:contains(fn:document-uri($d), &quot;archive&quot;)
  return fn:document-uri($d)</code></pre></noscript></div>
</p>

<h3>Delete all the document in the database</h3>

<hr />

<p><div><script src='https://gist.github.com/2039314.js?file=delete_all_documents.xqy'></script>
<noscript><pre><code>for $i in collection() return xdmp:document-delete(fn:document-uri($i))</code></pre></noscript></div>
</p>

<h3>Delete all the document in database based on some criteria</h3>

<hr />

<p>In this case we are deleting documents that are in the /content/ directory and whose uri ends with NEWSML.xml
<div><script src='https://gist.github.com/2039314.js?file=delete_documents_where_uri_matches_criteria.xqy'></script>
<noscript><pre><code>for $d in xdmp:directory(&quot;/content/&quot;, &quot;infinity&quot;)
  where not(fn:ends-with(fn:document-uri($d), &quot;NEWSML.xml&quot;))
  return xdmp:document-delete(fn:document-uri($d))</code></pre></noscript></div>
</p>

<h3>Query a document by an element with a certain value</h3>

<hr />

<p>This could be easily altered to match on any element or attribute in your xml.
<div><script src='https://gist.github.com/2039314.js?file=get_document_where_element_matches_value.xqy'></script>
<noscript><pre><code>declare namespace bbc = &quot;http://www.bbc.co.uk/content/asset&quot;;

declare variable $visibleUrl := '/news/cucumber/';

let $results := /bbc:index[
    /bbc:index/bbc:itemMeta/bbc:url[text()=$visibleUrl]
    ]
return $results</code></pre></noscript></div>
</p>

<p>Actually a much more efficient way of doing the same is:
<div><script src='https://gist.github.com/2039314.js?file=more_efficient_get_document_where_element_matches_value.xqy'></script>
<noscript><pre><code>import module namespace xinc = &quot;http://marklogic.com/xinclude&quot; at &quot;/MarkLogic/xinclude/xinclude.xqy&quot;;
declare namespace bbc = &quot;http://www.bbc.co.uk/asset&quot;;

let $public_url := &quot;/news/cucumber&quot;
let $asset := collection()[bbc:*/bbc:itemMeta/bbc:url/@href eq $public_url]/*

return xinc:node-expand($asset[1])</code></pre></noscript></div>
</p>

<!-- more -->


<p>Slightly more advanced&hellip;</p>

<h3>Retrieving document sizes</h3>

<hr />

<p>Very useful for getting a view of the size of your documents
<div><script src='https://gist.github.com/2039314.js?file=document_sizes_in_kb.xqy'></script>
<noscript><pre><code>declare namespace bbc = &quot;http://www.bbc.co.uk/asset&quot;;

let $results := /bbc:*[
    /bbc:*/bbc:itemMeta/bbc:assetTypeCode[text()='IDX']
    ]

(: return count($results) :) (: 147 IDX Assets :)

for $d in $results
order by string-length(xdmp:quote($d)) descending
return element doc {
	  element uri {$d/@uri},
          element url {$d/bbc:itemMeta/bbc:url/@href},
	  element size {string-length(xdmp:quote($d))},
          element size-kb {string-length(xdmp:quote($d)) div 1024}
	}</code></pre></noscript></div>
</p>

<p>This is how the results are returned
<div><script src='https://gist.github.com/2039314.js?file=results_of_document_sizes_in_kb.xml'></script>
<noscript><pre><code>&lt;v:results v:warning=&quot;more than one node&quot;&gt;
  &lt;doc&gt;
    &lt;uri uri=&quot;http://www.bbc.co.uk/asset/b53ed8ae-d628-7fbd-e040-850a2c872458/highweb/domestic&quot;/&gt;
    &lt;url href=&quot;/news/front_page&quot;/&gt;
    &lt;size&gt;400339&lt;/size&gt;
    &lt;size-kb&gt;390.9560546875&lt;/size-kb&gt;
  &lt;/doc&gt;
  &lt;doc&gt;
    &lt;uri uri=&quot;http://www.bbc.co.uk/asset/b53ed8ae-d628-7fbd-e040-850a2c872458/highweb/domestic&quot;/&gt;
    &lt;url href=&quot;/news/front_page&quot;/&gt;
    &lt;size&gt;400339&lt;/size&gt;
    &lt;size-kb&gt;390.9560546875&lt;/size-kb&gt;
  &lt;/doc&gt;
  &lt;doc&gt;
    &lt;uri uri=&quot;http://www.bbc.co.uk/asset/b53ed8ae-d628-7fbd-e040-850a2c872458/highweb/domestic&quot;/&gt;
    &lt;url href=&quot;/news/front_page&quot;/&gt;
    &lt;size&gt;400339&lt;/size&gt;
    &lt;size-kb&gt;390.9560546875&lt;/size-kb&gt;
  &lt;/doc&gt;
&lt;/v:results&gt;</code></pre></noscript></div>
</p>

<h3>Adding a depth attribute to your xml documents</h3>

<hr />

<p>Why is this useful I hear you say, demonstrates how to use xdmp:node-replace and xdmp:node-insert-child
<div><script src='https://gist.github.com/2039314.js?file=adding_a_depth_attribute_to_elements.xqy'></script>
<noscript><pre><code>let $sitemap := doc('/sitemap/sport-v6/highweb/domestic/sitemap.xml')
  for $node in $sitemap//*:node
  let $depth := count($node/ancestor::*)
return
  if($node/@depth != '')
    then (xdmp:node-replace($node/@depth, attribute depth {$depth -1}))
    else (xdmp:node-insert-child($node, attribute depth {$depth -1}))</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Evaluating Mark Logic XQuery Performance]]></title>
    <link href="http://JonCook.github.com/blog/2012/02/12/evaluating-mark-logic-xquery-performance/"/>
    <updated>2012-02-12T19:36:00+01:00</updated>
    <id>http://JonCook.github.com/blog/2012/02/12/evaluating-mark-logic-xquery-performance</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently been doing some work building RESTFul API&rsquo;s backed by a Mark Logic XML Content Store utilising XQuery for document retrieval. This post details the steps involved in tuning what was deemed to be the most simplest of queries for optimum performance using some useful Mark Logic extensions for profiling.</p>

<h3>Original Query</h3>

<hr />

<p>XQuery for looking up documents based on the value of a given attribute in the xml using XPath. (What could be simpler!)
<div><script src='https://gist.github.com/1810958.js?file=document_by_url.xqy'></script>
<noscript><pre><code>xquery version &quot;1.0-ml&quot;;

let $public_url := &quot;%s&quot;

let $results := /*[
    /*/itemMeta/url[@href=$public_url]
    ]

let $asset := $results[1]
return $asset</code></pre></noscript></div>
</p>

<h3>Evaluating Performance</h3>

<hr />

<p>By default Mark Logic indexes the document structure and attributes <strong>are</strong> indexed by default as part of the universal index.</p>

<h4>1. Adding xdmp:query-meters</h4>

<p>By adding xdmp:query-meters() to the query we get some immediate feedback about how the query performs including elapsed time and the number of fragments and documents that were selected. Altering the above query as below gives us some interesting metrics and the query is taking nearly 2 seconds.</p>

<p><div><script src='https://gist.github.com/1810958.js?file=document_by_url_with_xdmp_query_meters.xqy'></script>
<noscript><pre><code>return $asset,
xdmp:query-meters()</code></pre></noscript></div>

<div><script src='https://gist.github.com/1810958.js?file=result_of_xdmp_query_meters.xml'></script>
<noscript><pre><code>&lt;qm:elapsed-time&gt;PT1.802604S&lt;/qm:elapsed-time&gt;
&lt;qm:requests&gt;0&lt;/qm:requests&gt;
&lt;qm:list-cache-hits&gt;3&lt;/qm:list-cache-hits&gt;
&lt;qm:list-cache-misses&gt;0&lt;/qm:list-cache-misses&gt;
&lt;qm:in-memory-list-hits&gt;1&lt;/qm:in-memory-list-hits&gt;
&lt;qm:expanded-tree-cache-hits&gt;43762&lt;/qm:expanded-tree-cache-hits&gt;
&lt;qm:documents&gt;</code></pre></noscript></div>
</p>

<p>Immediately something looks a bit suspicious as all the documents in the database are being returned which would indicate that the query is not making effective use of Mark Logic&rsquo;s Indexes.</p>

<!-- more -->


<h4>2. Verifying with xdmp:estimate</h4>

<p>This can be verified with xdmp:estimate(), purely focusing on the XPath part of the query e.g.</p>

<p><div><script src='https://gist.github.com/1810958.js?file=document_by_url_with_xdmp_estimate.xqy'></script>
<noscript><pre><code>return xdmp:estimate(/*[
    /*/itemMeta/url[@href=$public_url]
    ])</code></pre></noscript></div>
</p>

<p>The evaluator sees the XPath expression above and uses index lookup&rsquo;s to match some sequence of fragments in the database. xdmp:estimate() gives an estimate of the number of documents in a sequence and is directed at the index-lookup phase, i.e &ldquo;search&rdquo;.</p>

<p><div><script src='https://gist.github.com/1810958.js?file=result_of_xdmp_estimate.xml'></script>
<noscript><pre><code>&lt;v:results v:warning=&quot;non-element item&quot;&gt;43762&lt;/v:results&gt;</code></pre></noscript></div>
</p>

<p>Next, the evaluator will fetch those matching fragment(s), if any, from the database. Now we are back in the evaluation phase. It will check to make sure the nodes really match: this is known as &ldquo;filtering&rdquo;. Then it will evaluate the entire XPath.</p>

<p>So what we are saying for the xquery above is that the number of matching fragments is all the documents in the database which will then get filtered so we are not making use of any of available Mark Logic indexing which means the query is very inefficient.</p>

<h4>3. Looking at the query plan with xdmp:plan</h4>

<p>This further verifies that all the documents in the database are being selected and we are not fully leveraging indexes</p>

<p><div><script src='https://gist.github.com/1810958.js?file=document_by_url_with_xdmp_plan.xqy'></script>
<noscript><pre><code>return xdmp:plan(/*[
    /*/itemMeta/url[@href=$public_url]
    ])</code></pre></noscript></div>

<div><script src='https://gist.github.com/1810958.js?file=result_of_xdmp_plan.xml'></script>
<noscript><pre><code>&lt;qry:query-plan xmlns:qry=&quot;http://marklogic.com/cts/query&quot;&gt;
  &lt;qry:info-trace&gt;xdmp:eval(&quot;xquery version &amp;amp;quot;1.0-ml&amp;amp;quot;;&amp;amp;#13;&amp;amp;#10;import module namesp...&quot;, (), &amp;lt;options xmlns=&quot;xdmp:eval&quot;&amp;gt;&amp;lt;database&amp;gt;14032772107247300631&amp;lt;/database&amp;gt;&amp;lt;modules&amp;gt;77217792867070...&amp;lt;/options&amp;gt;)&lt;/qry:info-trace&gt;
  &lt;qry:info-trace&gt;Analyzing path: fn:collection()/*[/*/itemMeta/url[@href = &quot;/news/technology&quot;]]&lt;/qry:info-trace&gt;
  &lt;qry:info-trace&gt;Step 1 is searchable: fn:collection()&lt;/qry:info-trace&gt;
  &lt;qry:info-trace&gt;Step 2 is searchable: *[/*/itemMeta/url[@href = &quot;/news/technology&quot;]]&lt;/qry:info-trace&gt;
  &lt;qry:info-trace&gt;Path is fully searchable.&lt;/qry:info-trace&gt;
  &lt;qry:info-trace&gt;Gathering constraints.&lt;/qry:info-trace&gt;
  &lt;qry:info-trace&gt;Executing search.&lt;/qry:info-trace&gt;
  &lt;qry:final-plan&gt;
    &lt;qry:and-query&gt;
      &lt;qry:term-query weight=&quot;0&quot;&gt;
	&lt;qry:key&gt;1458993848217274698&lt;/qry:key&gt;
      &lt;/qry:term-query&gt;
    &lt;/qry:and-query&gt;
  &lt;/qry:final-plan&gt;
  &lt;qry:info-trace&gt;Selected 43762 fragments&lt;/qry:info-trace&gt;
  &lt;qry:result estimate=&quot;43762&quot;/&gt;
&lt;/qry:query-plan&gt;</code></pre></noscript></div>
</p>

<h4>Looking at the XPath in more detail</h4>

<p>/* accesses the entire database and returns every root element in the database, but we do it a second time in the predicate which is very expensive.</p>

<p>Changing the XPath to below and re-running the above steps results in a much more positive result, and look how quick the query is!</p>

<p><div><script src='https://gist.github.com/1810958.js?file=document_by_url_tuned.xqy'></script>
<noscript><pre><code>return collection()[*/itemMeta/url/@href eq $public_url]/*
</code></pre></noscript></div>

<div><script src='https://gist.github.com/1810958.js?file=result_document_by_url_tuned.xml'></script>
<noscript><pre><code>&lt;qm:elapsed-time&gt;PT0.000773S&lt;/qm:elapsed-time&gt;
&lt;v:results v:warning=&quot;non-element item&quot;&gt;1&lt;/v:results&gt;
&lt;qry:info-trace&gt;Step 1 predicate 1 contributed 3 constraints: */itemMeta/url/@href eq &quot;/news/technology&quot;&lt;/qry:info-trace&gt;</code></pre></noscript></div>
</p>

<h3>Plugging in xinc:node-expand</h3>

<p>So far we have done our query evaluation ignoring the final piece which is to plugin the marklogic xinc:node-expand function which will resolves any x:includes in the results
<code>
return xinc:node-expand($asset)
</code></p>

<h4>Running the original query using xinc:node-expand</h4>

<p><strong>Not cached &ndash; 6 seconds!!</strong>
<code>
&lt;qm:elapsed-time&gt;PT6.05373S&lt;/qm:elapsed-time&gt;
</code>
<strong>Cached &ndash; 2 seconds</strong>
<code>
&lt;qm:elapsed-time&gt;PT2.154288S&lt;/qm:elapsed-time&gt;
</code></p>

<p>With our new optimised query we can see the time is much reduced below. This is a Mark Logic extension so we can&rsquo;t really do much about the performance of this. However it is interesting to see how much additional time this adds to the processing even for a fully optimised query.
<code>
&lt;qm:elapsed-time&gt;PT0.351562S&lt;/qm:elapsed-time&gt;
</code>
From the above it is easy to see the majority of the query is spent in the xinc:node-expand function but we have increased the overall performance dramatically.</p>

<h4>Conclusion</h4>

<p>Even what is deemed to be the simplest of xquery/xpath expressions might be inefficient. Mark Logic won&rsquo;t tell you how to fix your xquery/xpath but it will provide insight into whether your query is utilizing indexes and how it is actually running.</p>

<h4>Useful Links</h4>

<ul>
<li><a href="http://developer.marklogic.com/blog/learning-with-query-trace">http://developer.marklogic.com/blog/learning-with-query-trace</a></li>
<li><a href="http://developer.marklogic.com/blog/how-to-write-fast-queries">http://developer.marklogic.com/blog/how-to-write-fast-queries</a></li>
<li><a href="http://developer.marklogic.com/pubs/4.2/apidocs/Ext-4.html">http://developer.marklogic.com/pubs/4.2/apidocs/Ext-4.html</a></li>
<li><a href="http://developer.marklogic.com/pubs/4.2/apidocs/Ext-4.html#xdmp:estimate">http://developer.marklogic.com/pubs/4.2/apidocs/Ext-4.html#xdmp:estimate</a></li>
<li><a href="http://xqzone.marklogic.com/pubs/3.2/apidocs/Extension.html#query-meters">http://xqzone.marklogic.com/pubs/3.2/apidocs/Extension.html#query-meters</a></li>
<li><a href="http://developer.marklogic.com/blog/xquery-coding-guidelines">http://developer.marklogic.com/blog/xquery-coding-guidelines</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
