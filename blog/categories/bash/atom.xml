<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Bash, | Jon's Blog]]></title>
  <link href="http://JonCook.github.com/blog/categories/bash/atom.xml" rel="self"/>
  <link href="http://JonCook.github.com/"/>
  <updated>2014-01-13T23:36:36+01:00</updated>
  <id>http://JonCook.github.com/</id>
  <author>
    <name><![CDATA[Jon Cook]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Some Bash Fu with Curl, Grep, Awk and Pipes]]></title>
    <link href="http://JonCook.github.com/blog/2012/04/30/some-bash-fu-with-curl/"/>
    <updated>2012-04-30T01:15:00+02:00</updated>
    <id>http://JonCook.github.com/blog/2012/04/30/some-bash-fu-with-curl</id>
    <content type="html"><![CDATA[<p>I wanted to test out the HTTP response codes from a number of our API endpoints. There is numerous ways to approach this but I thought it would be fun to use the command line and it turned out pretty straight forward.</p>

<p>First off I created a file with some urls in e.g.
<code>
http://www.google.co.uk
http://www.bbc.co.uk
http://www.arsenal.com
</code></p>

<p>And ran the following command:
<code>
[root@pal ~]# grep "$1" urls.txt | awk '{print "curl --write-out "$0"=http-%{http_code}\"\n\" --silent --output /dev/null "$0'} | sh &gt;&gt; responses.txt
</code></p>

<p>This takes each line (url) and passes the argument to curl before outputting the url and http response code for said url into a file called responses.txt
<code>
http://www.google.co.uk=http-200
http://www.bbc.co.uk=http-200
http://www.arsenal.com=http-302
</code></p>

<p>You can then grep to count the number of different http response codes e.g.
<code>
[root@pal ~]# grep -c http-200 responses.txt
2
</code></p>

<p>In reality I ran the following command as wanted to do something a bit more complicated with curl by specifying certs and custom headers
<code>
grep "$1" urls.txt | awk '{print "curl --cert /etc/pki/my-pem.pem --cacert /etc/my-ca.pem -H \"Accept:application/json\" -H \"X-Candy-Audience:Domestic\" -H \"X-Candy-Platform:HighWeb\" --write-out "$0"=http-%{http_code}\"\n\" --silent --output /dev/null "$0'} | sh &gt;&gt; responses.txt
</code></p>

<p>I&rsquo;m not suggesting this is the best way to do this but nice not to need any frameworks or libraries. If I want to do this more regularly I will probably use a cucumber feature and setup a job in our CI environment not, forgetting a nice looking report but for now this is fine.</p>
]]></content>
  </entry>
  
</feed>
