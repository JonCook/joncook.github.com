<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Apache CXF java Tomcat | Jon's Blog]]></title>
  <link href="http://JonCook.github.com/blog/categories/apache-cxf-java-tomcat/atom.xml" rel="self"/>
  <link href="http://JonCook.github.com/"/>
  <updated>2014-01-13T23:36:36+01:00</updated>
  <id>http://JonCook.github.com/</id>
  <author>
    <name><![CDATA[Jon Cook]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Creating a HTTP Response Version Provider with Apache CXF Filters]]></title>
    <link href="http://JonCook.github.com/blog/2012/04/07/creating-a-http-response-version-provider-with-apache-cxf-filters/"/>
    <updated>2012-04-07T22:16:00+02:00</updated>
    <id>http://JonCook.github.com/blog/2012/04/07/creating-a-http-response-version-provider-with-apache-cxf-filters</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been using <a href="http://cxf.apache.org/">Apache CXF</a> which has some nice support for building JSR-311 compliant JAX-RS Services and recently had a requirement for sending back a custom version header as part of our API Responses.</p>

<p>It is generally accepted that versioning APIs is a good thing and adopting the general contract of Major.Minor.Patch covers our needs, now we need to have a standard method of reporting and documenting the APIs and versions. Before we get into the ins and outs of how one you should version an API, we have a company wide recommendation of adding a custom response header to each response <strong>X-API-Version: d.d.d</strong> which I have to say I&rsquo;m in favour of over embedding the version in the url and is also the method adopted by Sunâ€™s Cloud API &ndash; which certainly was commonly held to be a benchmark implementation of REST.</p>

<p>Using <a href="http://cxf.apache.org/docs/jax-rs-filters.html">Apache CXF Filters</a> led to this fairly elegant and simple solution which could be applied to add any type of additional headers but I found the documentation a little confusing so decided to write a post on it.</p>

<!-- more -->


<h3>Some background about applying response filters</h3>

<p>Perhaps you want to do custom logging or additional processing but more interestingly the response handler implementation can optionally overwrite or modify the application Response or modify the output message the first of which we are particularly interested in.</p>

<p>By implementing The ResponseHandler Interface:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.apache.cxf.jaxrs.ext.ResponseHandler</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And overriding handleResponse:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Response</span> <span class="nf">handleResponse</span><span class="o">(</span><span class="n">Message</span> <span class="n">message</span><span class="o">,</span> <span class="n">OperationResourceInfo</span> <span class="n">info</span><span class="o">,</span> <span class="n">Response</span> <span class="n">response</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="n">Response</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Starting with a test</h3>

<p>Starting off with the simplest scenario which for me is that the X-API-Version header should be present in the response. Normally I&rsquo;d start with the assert statement and work backwards using my Eclipse shortcuts. I&rsquo;ve skipped ahead a few steps here but hopefully you get the idea.</p>

<p>``` java
@Test
public void handleResponseShouldAddXAPIVersionHeader() throws Exception {</p>

<pre><code>HttpResponseVersionProvider versionProvider = new HttpResponseVersionProvider();

Response versionedResponse = versionProvider.handleResponse(null, null, null);
assertEquals("1.1.11", versionedResponse.getMetadata().get("X-API-Version").get(0));
</code></pre>

<p>}
```</p>

<h4>Diving into our HttpResponseVersionProvider</h4>

<p>So remember we are just doing the simplest thing possible to make the test pass which in this case is to add the new header to the final response.</p>

<p>``` java
@Override
public Response handleResponse(Message message, OperationResourceInfo info, Response response) {</p>

<pre><code>return Response.ok().header("X-API-Version", "1.1.11").build();
</code></pre>

<p>}
```</p>

<h3>Preserving the original response object</h3>

<p>We obviously want to preserve the original response object and message body on the outgoing response so I add a test for that now introducing some Mocks to mock out the original response object.</p>

<p>``` java</p>

<pre><code>@Test
public void handleResponseShouldMaintainOriginalResponseValuesAndAddXAPIVersionHeader() throws Exception {
    String responseEntity = "Response";
    when(response.getStatus()).thenReturn(200);
    when(response.getEntity()).thenReturn(responseEntity);
    when(response.getMetadata()).thenReturn(new MetadataMap&lt;String, Object&gt;());

    HttpResponseVersionProvider versionProvider = new HttpResponseVersionProvider(API_VERSION_NUMBER);

    Response versionedResponse = versionProvider.handleResponse(null, null, response);
    assertEquals(200, versionedResponse.getStatus());
    assertEquals(responseEntity, versionedResponse.getEntity());
    assertEquals(API_VERSION_NUMBER, versionedResponse.getMetadata().get(HttpResponseVersionProvider.VERSION_HEADER).get(0));
}
</code></pre>

<p>```</p>

<h4>Our final HttpResponseVersionProvider</h4>

<p><a href="http://jackson.codehaus.org/javadoc/jax-rs/1.0/javax/ws/rs/core/Response.html#fromResponse%28javax.ws.rs.core.Response%29">fromResponse</a> performs a shallow copy of the existing Response.
``` java</p>

<pre><code>@Override
public Response handleResponse(Message message, OperationResourceInfo info, Response response) {
    return Response.fromResponse(response).header(VERSION_HEADER, version).build();
}
</code></pre>

<p>```</p>

<h4>Refactor</h4>

<p>You can see the tidied up finished test class and implementation here:</p>

<ul>
<li><a href="https://gist.github.com/2332281">HttpResponseVersionProviderTest.java</a></li>
<li><a href="https://gist.github.com/2336443">HttpResponseVersionProvider.java</a></li>
</ul>


<h3>Wiring it up</h3>

<p>Plug in to your cxf jax-rs providers spring configuration along with any other providers using your maven project version number.
``` xml</p>

<p>&lt;jaxrs:providers></p>

<pre><code>&lt;ref bean="jaxRsExceptionHandler"/&gt;
&lt;ref bean="httpRequestMonitor"/&gt;
&lt;ref bean="assetWhitelistFilter"/&gt;
&lt;ref bean="httpResponseMonitor"/&gt;
&lt;ref bean="httpResponseVersionProvider"/&gt;
</code></pre>

<p>&lt;/jaxrs:providers></p>

<p><bean id="httpResponseVersionProvider" class="bbc.forge.dsp.jaxrs.HttpResponseVersionProvider"></p>

<pre><code>&lt;constructor-arg value="${project.version}"&gt;&lt;/constructor-arg&gt;
</code></pre>

<p></bean></p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
