<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jon's Blog]]></title>
  <link href="http://JonCook.github.com/atom.xml" rel="self"/>
  <link href="http://JonCook.github.com/"/>
  <updated>2014-01-13T23:36:36+01:00</updated>
  <id>http://JonCook.github.com/</id>
  <author>
    <name><![CDATA[Jon Cook]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[XML Processing with Scala]]></title>
    <link href="http://JonCook.github.com/blog/2013/11/03/xml-processing-with-scala/"/>
    <updated>2013-11-03T08:33:00+01:00</updated>
    <id>http://JonCook.github.com/blog/2013/11/03/xml-processing-with-scala</id>
    <content type="html"><![CDATA[<p>Given scala&rsquo;s built-in support for XML and its more concise syntax for dealing with iterables and collections I was interested to see what some of our java xml parsing code written using Dom4j could look like in the Scala world.</p>

<h3>Background</h3>

<p>A bit of brief background, the idea is we have a number of assets, an asset representing for example a story, index page, picture gallery, page with media. Each Asset has it&rsquo;s own xml representation and is constructed using common snippets such as item-meta, page-options, media etc. See story.xml.</p>

<p>Our requirement, is to take this xml which is our own internal representation which we use to repesent assets in our content store and essentially transform this into our object model and serve this up as json or xml. You may ask why but isolating our internal format means we are free to change this without effecting the external representations of our assets and it also means we can customise the output and the format of the output easily.</p>

<p>Xml processing in java is typically done in sax or dom using a library like dom4J, we opted for the readability and ease of use the Dom over SAX and used something loosely based on the Strategy design pattern where we have a ParserFactory, this allocates the correct type of asset parser based on the type of asset parses the xml and creates our java object model. Xml and Json generation is handled by jaxb and jackson.</p>

<!-- more -->


<h3>POJO&rsquo;s</h3>

<p>The recommendation looking at the scala documentation is to implement a toXML method and a corresponding fromXML method from within side a
companion object which takes care of creating said object. e.g) A Story POJO which extends an Asset class.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">com.cookybear.content.asset</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.xml.NodeSeq</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Story</span><span class="o">(</span>
</span><span class='line'>  <span class="n">itemMeta</span><span class="k">:</span> <span class="kt">ItemMeta</span><span class="o">,</span>
</span><span class='line'>  <span class="n">pageOptions</span><span class="k">:</span> <span class="kt">PageOptions</span><span class="o">,</span>
</span><span class='line'>  <span class="n">byline</span><span class="k">:</span> <span class="kt">Byline</span><span class="o">,</span>
</span><span class='line'>  <span class="n">body</span><span class="k">:</span> <span class="kt">NodeSeq</span><span class="o">,</span>
</span><span class='line'>  <span class="n">media</span><span class="k">:</span> <span class="kt">Media</span><span class="o">,</span>
</span><span class='line'>  <span class="n">relatedGroups</span><span class="k">:</span> <span class="kt">RelatedGroups</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Asset</span><span class="o">(</span><span class="n">itemMeta</span><span class="o">,</span> <span class="n">pageOptions</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">toXML</span> <span class="k">=</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">result</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">{</span> <span class="k">super</span><span class="o">.</span><span class="n">toXML</span><span class="o">.</span><span class="n">child</span> <span class="o">}</span>
</span><span class='line'>      <span class="o">{</span> <span class="n">byline</span><span class="o">.</span><span class="n">toXML</span> <span class="o">}</span>
</span><span class='line'>      <span class="o">{</span> <span class="n">body</span> <span class="o">}</span>
</span><span class='line'>      <span class="o">{</span> <span class="n">media</span><span class="o">.</span><span class="n">toXML</span> <span class="o">}</span>
</span><span class='line'>      <span class="o">{</span> <span class="n">relatedGroups</span><span class="o">.</span><span class="n">toXML</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">&lt;/</span><span class="n">result</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">Story</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">fromXML</span><span class="o">(</span><span class="n">node</span><span class="k">:</span> <span class="kt">scala.xml.NodeSeq</span><span class="o">)</span><span class="k">:</span> <span class="kt">Story</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">new</span> <span class="nc">Story</span><span class="o">(</span>
</span><span class='line'>      <span class="nc">ItemMeta</span><span class="o">.</span><span class="n">fromXML</span><span class="o">((</span><span class="n">node</span> <span class="o">\</span> <span class="s">&quot;itemMeta&quot;</span><span class="o">)),</span>
</span><span class='line'>      <span class="nc">PageOptions</span><span class="o">.</span><span class="n">fromXML</span><span class="o">((</span><span class="n">node</span> <span class="o">\</span> <span class="s">&quot;pageOptions&quot;</span><span class="o">)),</span>
</span><span class='line'>      <span class="nc">Byline</span><span class="o">.</span><span class="n">fromXML</span><span class="o">((</span><span class="n">node</span> <span class="o">\</span> <span class="s">&quot;byline&quot;</span><span class="o">)),</span>
</span><span class='line'>      <span class="o">(</span><span class="n">node</span> <span class="o">\</span> <span class="s">&quot;body&quot;</span><span class="o">),</span>
</span><span class='line'>      <span class="nc">Media</span><span class="o">.</span><span class="n">fromXML</span><span class="o">((</span><span class="n">node</span> <span class="o">\</span> <span class="s">&quot;media&quot;</span><span class="o">)),</span>
</span><span class='line'>      <span class="nc">RelatedGroups</span><span class="o">.</span><span class="n">fromXML</span><span class="o">(</span><span class="n">node</span> <span class="o">\</span> <span class="s">&quot;relatedGroups&quot;</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Parsing and iterating over elements</h3>

<p>Parsing and iterating over elements is much neater and concise than the java equivalent e.g) A byline is made up a name, a title and a list of
Person objects.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">com.cookybear.content.asset</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Byline</span><span class="o">(</span><span class="k">val</span> <span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="k">val</span> <span class="n">title</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="k">val</span> <span class="n">persons</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Person</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">toXML</span> <span class="k">=</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">byline</span> <span class="n">name</span><span class="o">={</span> <span class="n">name</span> <span class="o">}</span> <span class="n">title</span><span class="o">={</span> <span class="n">title</span> <span class="o">}&gt;</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">persons</span><span class="o">.</span><span class="n">isEmpty</span><span class="o">)</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="n">persons</span><span class="o">&gt;{</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="n">person</span> <span class="k">&lt;-</span> <span class="n">persons</span><span class="o">)</span> <span class="k">yield</span> <span class="n">person</span><span class="o">.</span><span class="n">toXML</span>
</span><span class='line'>          <span class="o">}&lt;/</span><span class="n">persons</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">&lt;/</span><span class="n">byline</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">Byline</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">fromXML</span><span class="o">(</span><span class="n">node</span><span class="k">:</span> <span class="kt">scala.xml.NodeSeq</span><span class="o">)</span><span class="k">:</span> <span class="kt">Byline</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">new</span> <span class="nc">Byline</span><span class="o">(</span>
</span><span class='line'>      <span class="n">name</span> <span class="k">=</span> <span class="o">(</span><span class="n">node</span> <span class="o">\</span> <span class="s">&quot;@name&quot;</span><span class="o">).</span><span class="n">text</span><span class="o">,</span>
</span><span class='line'>      <span class="n">title</span> <span class="k">=</span> <span class="o">(</span><span class="n">node</span> <span class="o">\</span> <span class="s">&quot;@title&quot;</span><span class="o">).</span><span class="n">text</span><span class="o">,</span>
</span><span class='line'>      <span class="nc">List</span><span class="o">[</span><span class="kt">Person</span><span class="o">]((</span><span class="n">node</span> <span class="o">\</span> <span class="s">&quot;person&quot;</span><span class="o">).</span><span class="n">toList</span> <span class="n">map</span> <span class="o">{</span> <span class="n">s</span> <span class="k">=&gt;</span> <span class="nc">Person</span><span class="o">.</span><span class="n">fromXML</span><span class="o">(</span><span class="n">s</span><span class="o">)</span> <span class="o">}</span><span class="k">:</span> <span class="k">_</span><span class="kt">*</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In my opinion this is where you start to see the real power of Scala by calling .toList on the sequence of person nodes you can then map this to a list of people. Person will have its own corresponding toXML implementation as well. We remove those horrible null checks and cumbersom for loops and my favourite removing all the static xPath constants. No need to worry about name spaces either.</p>

<p>The equivalent in java for parsing the byline and person elements which doesn&rsquo;t include the pojo for byline either. Much more cumbersom and messy and you&rsquo;ve got no feel for what the corresponding structure of the xml will look like when we deserialize a byline.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">Byline</span> <span class="nf">parseByline</span><span class="o">(</span><span class="n">Element</span> <span class="n">bylineElement</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Byline</span> <span class="n">byline</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">bylineElement</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">byline</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Byline</span><span class="o">();</span>
</span><span class='line'>        <span class="n">byline</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">bylineElement</span><span class="o">.</span><span class="na">attributeValue</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">byline</span><span class="o">.</span><span class="na">setTitle</span><span class="o">(</span><span class="n">bylineElement</span><span class="o">.</span><span class="na">attributeValue</span><span class="o">(</span><span class="s">&quot;title&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Element</span><span class="o">&gt;</span> <span class="n">persons</span> <span class="o">=</span>  <span class="n">BYLINE_PERSON_XPATH_SELECTOR</span><span class="o">.</span><span class="na">selectNodes</span><span class="o">(</span><span class="n">bylineElement</span><span class="o">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Element</span> <span class="n">element</span> <span class="o">:</span> <span class="n">persons</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="n">parsePerson</span><span class="o">(</span><span class="n">element</span><span class="o">);</span>
</span><span class='line'>           <span class="n">byline</span><span class="o">.</span><span class="na">getPersons</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="n">person</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">byline</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">Person</span> <span class="nf">parsePerson</span><span class="o">(</span><span class="n">Element</span> <span class="n">element</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">();</span>
</span><span class='line'>    <span class="n">person</span><span class="o">.</span><span class="na">setThumbnail</span><span class="o">(</span><span class="n">getAbsoluteImageHref</span><span class="o">(</span><span class="n">element</span><span class="o">.</span><span class="na">attributeValue</span><span class="o">(</span><span class="s">&quot;thumbnail&quot;</span><span class="o">)));</span>
</span><span class='line'>    <span class="n">person</span><span class="o">.</span><span class="na">setFunction</span><span class="o">(</span><span class="n">BYLINE_PERSON_FUNCTION_XPATH_SELECTOR</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">element</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">person</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">BYLINE_PERSON_NAME_XPATH_SELECTOR</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">element</span><span class="o">));</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">person</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Plugging it together Using scala&rsquo;s XML Pattern Matching</h3>

<p>We are able to eliminate the existing ParserFactory class and have an AssetFactory which allocates the right type of Asset e.g)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>
</span><span class='line'><span class="k">package</span> <span class="nn">com.cookybear.content.asset.factory</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">com.cookybear.content.asset.Asset</span>
</span><span class='line'><span class="k">import</span> <span class="nn">com.cookybear.content.asset.Story</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">AssetFactory</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">factory</span><span class="o">(</span><span class="n">node</span><span class="k">:</span> <span class="kt">scala.xml.Node</span><span class="o">)</span><span class="k">:</span> <span class="kt">Asset</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">trimmedNode</span> <span class="k">=</span> <span class="n">scala</span><span class="o">.</span><span class="n">xml</span><span class="o">.</span><span class="nc">Utility</span><span class="o">.</span><span class="n">trim</span><span class="o">(</span><span class="n">node</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">trimmedNode</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="o">&lt;</span><span class="n">story</span><span class="o">&gt;{</span> <span class="n">children</span> <span class="k">@</span> <span class="k">_</span><span class="o">*</span> <span class="o">}&lt;/</span><span class="n">story</span><span class="o">&gt;</span> <span class="k">=&gt;</span> <span class="nc">Story</span><span class="o">.</span><span class="n">fromXML</span><span class="o">(</span><span class="n">trimmedNode</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Testability</h3>

<p>I think the code is more testable now as well. I prefer the readability of these type of tests using something like ScalaTest. I created my own convenience trait XmlDataSpec which is essentially a way to minimise the number of mixins used in our tests. FixtureTestUtils gives us a way to load in xml fixtures. You can load in snippets from file or inline the xml element you wish to test and it all just seems more natural, readable and less verbose than the java equivalent. e.g)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">com.cookybear.content.asset</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">com.cookybear.content.XmlDataSpec</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.junit.runner.RunWith</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.scalatest.junit.JUnitRunner</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">classOf</span><span class="o">[</span><span class="kt">JUnitRunner</span><span class="o">])</span>
</span><span class='line'><span class="k">class</span> <span class="nc">BylineSpec</span> <span class="k">extends</span> <span class="nc">XmlDataSpec</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span><span class="o">(</span><span class="s">&quot;A Byline with a list of authors&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">byline</span> <span class="k">=</span> <span class="nc">Byline</span><span class="o">.</span><span class="n">fromXML</span><span class="o">(</span><span class="n">xmlFixture</span><span class="o">(</span><span class="s">&quot;/xml/byline.xml&quot;</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span><span class="o">(</span><span class="s">&quot;should have name and title&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">assert</span><span class="o">(</span><span class="n">byline</span><span class="o">.</span><span class="n">name</span> <span class="o">===</span> <span class="s">&quot;By AJP Taylor &amp; Adam Brookes &amp; Alan Hansen&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="n">assert</span><span class="o">(</span><span class="n">byline</span><span class="o">.</span><span class="n">title</span> <span class="o">===</span> <span class="s">&quot;Historian&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span><span class="o">(</span><span class="s">&quot;should contain a list of people&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">byline</span><span class="o">.</span><span class="n">persons</span> <span class="n">must</span> <span class="n">have</span> <span class="n">length</span> <span class="o">(</span><span class="mi">3</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>What I like (lots!)</h3>

<ul>
<li>No need for separate parser classes which contain huge amounts of static constants declaring xpath snippets.</li>
<li>You can see in one place the xml representation of the class and also the parsing code to create the object.</li>
<li>It is easy to see what for example a Story is made up of, in this case, itemMeta, PageOptions, Byline, Media and Related Groups</li>
<li>Nulls are taken care of and iterating over nodes is much neater.</li>
<li>Generating xml doesn&rsquo;t require any frameworks, I&rsquo;ve been frustrated by the inflexibility of jax-b particularly around handling empty elements and
also having to define lots of custom adapters which are a disaster, not to mention ending up with lots of annotations in your pojos.</li>
</ul>


<h3>Improvements</h3>

<ul>
<li>I think there is probably a nicer way to handle conditional elements using None and Some</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">{</span><span class="k">if</span> <span class="o">(!</span><span class="n">title</span><span class="o">.</span><span class="n">isEmpty</span><span class="o">)</span> <span class="o">&lt;</span><span class="n">title</span><span class="o">&gt;{</span><span class="n">title</span><span class="o">}&lt;/</span><span class="n">title</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Inline xml in pojos is ok for small snippets but I could see this becoming messy if care wasn&rsquo;t taken</li>
</ul>


<h3>The code</h3>

<p>I&rsquo;ve put the sample code on github, <a href="https://github.com/JonCook/scala-xml-parsing-example">here</a>. You&rsquo;ll need SBT installed and once you have checked it out simple run sbt test to see the unit tests. In addition to this Main.sala is a simple test harness for processing a story. Please remember I&rsquo;m not a scala expert, I&rsquo;m pretty sure there is a way to improve the double .toList calls in Media.scala using zip and also some people may suggest that some of the functions inside .toList aren&rsquo;t readable but I think they are if you are familiar with scala.</p>

<p>Gists are available <a href="https://gist.github.com/JonCook/8397116">here</a> for the code here.</p>

<h3>Conclusion</h3>

<p>I&rsquo;ve seen a lot of complaints about the current implementation of scala.xml but for simple xml representations and parsing I think it works really well and is much more readible than the java equivalent. The performance is equal if not better than dom4j</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Bash Fu with Curl, Grep, Awk and Pipes]]></title>
    <link href="http://JonCook.github.com/blog/2012/04/30/some-bash-fu-with-curl/"/>
    <updated>2012-04-30T01:15:00+02:00</updated>
    <id>http://JonCook.github.com/blog/2012/04/30/some-bash-fu-with-curl</id>
    <content type="html"><![CDATA[<p>I wanted to test out the HTTP response codes from a number of our API endpoints. There is numerous ways to approach this but I thought it would be fun to use the command line and it turned out pretty straight forward.</p>

<p>First off I created a file with some urls in e.g.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://www.google.co.uk
</span><span class='line'>http://www.bbc.co.uk
</span><span class='line'>http://www.arsenal.com</span></code></pre></td></tr></table></div></figure>


<p>And ran the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@pal ~]# grep "$1" urls.txt | awk '{print "curl --write-out "$0"=http-%{http_code}\"\n\" --silent --output /dev/null "$0'} | sh &gt;&gt; responses.txt</span></code></pre></td></tr></table></div></figure>


<p>This takes each line (url) and passes the argument to curl before outputting the url and http response code for said url into a file called responses.txt</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://www.google.co.uk=http-200
</span><span class='line'>http://www.bbc.co.uk=http-200
</span><span class='line'>http://www.arsenal.com=http-302</span></code></pre></td></tr></table></div></figure>


<p>You can then grep to count the number of different http response codes e.g.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@pal ~]# grep -c http-200 responses.txt
</span><span class='line'>2</span></code></pre></td></tr></table></div></figure>


<p>In reality I ran the following command as wanted to do something a bit more complicated with curl by specifying certs and custom headers</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grep "$1" urls.txt | awk '{print "curl --cert /etc/pki/my-pem.pem --cacert /etc/my-ca.pem -H \"Accept:application/json\" -H \"X-Candy-Audience:Domestic\" -H \"X-Candy-Platform:HighWeb\" --write-out "$0"=http-%{http_code}\"\n\" --silent --output /dev/null "$0'} | sh &gt;&gt; responses.txt</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m not suggesting this is the best way to do this but nice not to need any frameworks or libraries. If I want to do this more regularly I will probably use a cucumber feature and setup a job in our CI environment not, forgetting a nice looking report but for now this is fine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a HTTP Response Version Provider with Apache CXF Filters]]></title>
    <link href="http://JonCook.github.com/blog/2012/04/07/creating-a-http-response-version-provider-with-apache-cxf-filters/"/>
    <updated>2012-04-07T22:16:00+02:00</updated>
    <id>http://JonCook.github.com/blog/2012/04/07/creating-a-http-response-version-provider-with-apache-cxf-filters</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been using <a href="http://cxf.apache.org/">Apache CXF</a> which has some nice support for building JSR-311 compliant JAX-RS Services and recently had a requirement for sending back a custom version header as part of our API Responses.</p>

<p>It is generally accepted that versioning APIs is a good thing and adopting the general contract of Major.Minor.Patch covers our needs, now we need to have a standard method of reporting and documenting the APIs and versions. Before we get into the ins and outs of how one you should version an API, we have a company wide recommendation of adding a custom response header to each response <strong>X-API-Version: d.d.d</strong> which I have to say I&rsquo;m in favour of over embedding the version in the url and is also the method adopted by Sun’s Cloud API &ndash; which certainly was commonly held to be a benchmark implementation of REST.</p>

<p>Using <a href="http://cxf.apache.org/docs/jax-rs-filters.html">Apache CXF Filters</a> led to this fairly elegant and simple solution which could be applied to add any type of additional headers but I found the documentation a little confusing so decided to write a post on it.</p>

<!-- more -->


<h3>Some background about applying response filters</h3>

<p>Perhaps you want to do custom logging or additional processing but more interestingly the response handler implementation can optionally overwrite or modify the application Response or modify the output message the first of which we are particularly interested in.</p>

<p>By implementing The ResponseHandler Interface:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.apache.cxf.jaxrs.ext.ResponseHandler</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And overriding handleResponse:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Response</span> <span class="nf">handleResponse</span><span class="o">(</span><span class="n">Message</span> <span class="n">message</span><span class="o">,</span> <span class="n">OperationResourceInfo</span> <span class="n">info</span><span class="o">,</span> <span class="n">Response</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">Response</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Starting with a test</h3>

<p>Starting off with the simplest scenario which for me is that the X-API-Version header should be present in the response. Normally I&rsquo;d start with the assert statement and work backwards using my Eclipse shortcuts. I&rsquo;ve skipped ahead a few steps here but hopefully you get the idea.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">handleResponseShouldAddXAPIVersionHeader</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">HttpResponseVersionProvider</span> <span class="n">versionProvider</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HttpResponseVersionProvider</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Response</span> <span class="n">versionedResponse</span> <span class="o">=</span> <span class="n">versionProvider</span><span class="o">.</span><span class="na">handleResponse</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>  <span class="n">assertEquals</span><span class="o">(</span><span class="s">&quot;1.1.11&quot;</span><span class="o">,</span> <span class="n">versionedResponse</span><span class="o">.</span><span class="na">getMetadata</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;X-API-Version&quot;</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Diving into our HttpResponseVersionProvider</h4>

<p>So remember we are just doing the simplest thing possible to make the test pass which in this case is to add the new header to the final response.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Response</span> <span class="nf">handleResponse</span><span class="o">(</span><span class="n">Message</span> <span class="n">message</span><span class="o">,</span> <span class="n">OperationResourceInfo</span> <span class="n">info</span><span class="o">,</span> <span class="n">Response</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">Response</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">header</span><span class="o">(</span><span class="s">&quot;X-API-Version&quot;</span><span class="o">,</span> <span class="s">&quot;1.1.11&quot;</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Preserving the original response object</h3>

<p>We obviously want to preserve the original response object and message body on the outgoing response so I add a test for that now introducing some Mocks to mock out the original response object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">handleResponseShouldMaintainOriginalResponseValuesAndAddXAPIVersionHeader</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">responseEntity</span> <span class="o">=</span> <span class="s">&quot;Response&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="n">when</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">getStatus</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="mi">200</span><span class="o">);</span>
</span><span class='line'>  <span class="n">when</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">getEntity</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">responseEntity</span><span class="o">);</span>
</span><span class='line'>  <span class="n">when</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">getMetadata</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="k">new</span> <span class="n">MetadataMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;());</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">HttpResponseVersionProvider</span> <span class="n">versionProvider</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HttpResponseVersionProvider</span><span class="o">(</span><span class="n">API_VERSION_NUMBER</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">Response</span> <span class="n">versionedResponse</span> <span class="o">=</span> <span class="n">versionProvider</span><span class="o">.</span><span class="na">handleResponse</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span><span class='line'>  <span class="n">assertEquals</span><span class="o">(</span><span class="mi">200</span><span class="o">,</span> <span class="n">versionedResponse</span><span class="o">.</span><span class="na">getStatus</span><span class="o">());</span>
</span><span class='line'>  <span class="n">assertEquals</span><span class="o">(</span><span class="n">responseEntity</span><span class="o">,</span> <span class="n">versionedResponse</span><span class="o">.</span><span class="na">getEntity</span><span class="o">());</span>
</span><span class='line'>  <span class="n">assertEquals</span><span class="o">(</span><span class="n">API_VERSION_NUMBER</span><span class="o">,</span> <span class="n">versionedResponse</span><span class="o">.</span><span class="na">getMetadata</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="n">HttpResponseVersionProvider</span><span class="o">.</span><span class="na">VERSION_HEADER</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Our final HttpResponseVersionProvider</h4>

<p><a href="http://jackson.codehaus.org/javadoc/jax-rs/1.0/javax/ws/rs/core/Response.html#fromResponse%28javax.ws.rs.core.Response%29">fromResponse</a> performs a shallow copy of the existing Response.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Response</span> <span class="nf">handleResponse</span><span class="o">(</span><span class="n">Message</span> <span class="n">message</span><span class="o">,</span> <span class="n">OperationResourceInfo</span> <span class="n">info</span><span class="o">,</span> <span class="n">Response</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">Response</span><span class="o">.</span><span class="na">fromResponse</span><span class="o">(</span><span class="n">response</span><span class="o">).</span><span class="na">header</span><span class="o">(</span><span class="n">VERSION_HEADER</span><span class="o">,</span> <span class="n">version</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Refactor</h4>

<p>You can see the tidied up finished test class and implementation here:</p>

<ul>
<li><a href="https://gist.github.com/2332281">HttpResponseVersionProviderTest.java</a></li>
<li><a href="https://gist.github.com/2336443">HttpResponseVersionProvider.java</a></li>
</ul>


<h3>Wiring it up</h3>

<p>Plug in to your cxf jax-rs providers spring configuration along with any other providers using your maven project version number.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;jaxrs:providers&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ref</span> <span class="na">bean=</span><span class="s">&quot;jaxRsExceptionHandler&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ref</span> <span class="na">bean=</span><span class="s">&quot;httpRequestMonitor&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ref</span> <span class="na">bean=</span><span class="s">&quot;assetWhitelistFilter&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ref</span> <span class="na">bean=</span><span class="s">&quot;httpResponseMonitor&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ref</span> <span class="na">bean=</span><span class="s">&quot;httpResponseVersionProvider&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/jaxrs:providers&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;httpResponseVersionProvider&quot;</span> <span class="na">class=</span><span class="s">&quot;bbc.forge.dsp.jaxrs.HttpResponseVersionProvider&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;constructor-arg</span> <span class="na">value=</span><span class="s">&quot;${project.version}&quot;</span><span class="nt">&gt;&lt;/constructor-arg&gt;</span>
</span><span class='line'><span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Useful XQuery]]></title>
    <link href="http://JonCook.github.com/blog/2012/03/15/useful-xquery/"/>
    <updated>2012-03-15T13:58:00+01:00</updated>
    <id>http://JonCook.github.com/blog/2012/03/15/useful-xquery</id>
    <content type="html"><![CDATA[<p>As I mentioned in my previous <a href="http://joncook.github.com/blog/2012/02/12/evaluating-mark-logic-xquery-performance/">blog post</a> I&rsquo;ve recently been doing some work building RESTFul API&rsquo;s backed by a Mark Logic XML Content Store utilising XQuery for document retrieval which has led me come up with the following useful snippets of XQuery that I thought I would share. They could easily be altered to work with slightly different requirements.</p>

<h3>List all the document uris in database</h3>

<hr />

<div><script src='https://gist.github.com/2039314.js?file=list_all_document_uris.xqy'></script>
<noscript><pre><code>for $i in collection() return document-uri($i)</code></pre></noscript></div>


<h3>List all the document uris in database based on some criteria</h3>

<hr />

<p>In this case we are restricting the documents that exist in the /sitemap/ directory and end with sitemap.xml and do not contain archive in the uri</p>

<div><script src='https://gist.github.com/2039314.js?file=list_document_uris_where_uri_matches_criteria.xqy'></script>
<noscript><pre><code>for $d in xdmp:directory(&quot;/sitemap/&quot;, &quot;infinity&quot;)
  where fn:ends-with(fn:document-uri($d), &quot;sitemap.xml&quot;)
  and not fn:contains(fn:document-uri($d), &quot;archive&quot;)
  return fn:document-uri($d)</code></pre></noscript></div>


<h3>Delete all the document in the database</h3>

<hr />

<div><script src='https://gist.github.com/2039314.js?file=delete_all_documents.xqy'></script>
<noscript><pre><code>for $i in collection() return xdmp:document-delete(fn:document-uri($i))</code></pre></noscript></div>


<h3>Delete all the document in database based on some criteria</h3>

<hr />

<p>In this case we are deleting documents that are in the /content/ directory and whose uri ends with NEWSML.xml</p>

<div><script src='https://gist.github.com/2039314.js?file=delete_documents_where_uri_matches_criteria.xqy'></script>
<noscript><pre><code>for $d in xdmp:directory(&quot;/content/&quot;, &quot;infinity&quot;)
  where not(fn:ends-with(fn:document-uri($d), &quot;NEWSML.xml&quot;))
  return xdmp:document-delete(fn:document-uri($d))</code></pre></noscript></div>


<h3>Query a document by an element with a certain value</h3>

<hr />

<p>This could be easily altered to match on any element or attribute in your xml.</p>

<div><script src='https://gist.github.com/2039314.js?file=get_document_where_element_matches_value.xqy'></script>
<noscript><pre><code>declare namespace bbc = &quot;http://www.bbc.co.uk/content/asset&quot;;

declare variable $visibleUrl := '/news/cucumber/';

let $results := /bbc:index[
    /bbc:index/bbc:itemMeta/bbc:url[text()=$visibleUrl]
    ]
return $results</code></pre></noscript></div>


<p>Actually a much more efficient way of doing the same is:</p>

<div><script src='https://gist.github.com/2039314.js?file=more_efficient_get_document_where_element_matches_value.xqy'></script>
<noscript><pre><code>import module namespace xinc = &quot;http://marklogic.com/xinclude&quot; at &quot;/MarkLogic/xinclude/xinclude.xqy&quot;;
declare namespace bbc = &quot;http://www.bbc.co.uk/asset&quot;;

let $public_url := &quot;/news/cucumber&quot;
let $asset := collection()[bbc:*/bbc:itemMeta/bbc:url/@href eq $public_url]/*

return xinc:node-expand($asset[1])</code></pre></noscript></div>




<!-- more -->


<p>Slightly more advanced&hellip;</p>

<h3>Retrieving document sizes</h3>

<hr />

<p>Very useful for getting a view of the size of your documents</p>

<div><script src='https://gist.github.com/2039314.js?file=document_sizes_in_kb.xqy'></script>
<noscript><pre><code>declare namespace bbc = &quot;http://www.bbc.co.uk/asset&quot;;

let $results := /bbc:*[
    /bbc:*/bbc:itemMeta/bbc:assetTypeCode[text()='IDX']
    ]

(: return count($results) :) (: 147 IDX Assets :)

for $d in $results
order by string-length(xdmp:quote($d)) descending
return element doc {
      element uri {$d/@uri},
          element url {$d/bbc:itemMeta/bbc:url/@href},
      element size {string-length(xdmp:quote($d))},
          element size-kb {string-length(xdmp:quote($d)) div 1024}
    }</code></pre></noscript></div>


<p>This is how the results are returned</p>

<div><script src='https://gist.github.com/2039314.js?file=results_of_document_sizes_in_kb.xml'></script>
<noscript><pre><code>&lt;v:results v:warning=&quot;more than one node&quot;&gt;
  &lt;doc&gt;
    &lt;uri uri=&quot;http://www.bbc.co.uk/asset/b53ed8ae-d628-7fbd-e040-850a2c872458/highweb/domestic&quot;/&gt;
    &lt;url href=&quot;/news/front_page&quot;/&gt;
    &lt;size&gt;400339&lt;/size&gt;
    &lt;size-kb&gt;390.9560546875&lt;/size-kb&gt;
  &lt;/doc&gt;
  &lt;doc&gt;
    &lt;uri uri=&quot;http://www.bbc.co.uk/asset/b53ed8ae-d628-7fbd-e040-850a2c872458/highweb/domestic&quot;/&gt;
    &lt;url href=&quot;/news/front_page&quot;/&gt;
    &lt;size&gt;400339&lt;/size&gt;
    &lt;size-kb&gt;390.9560546875&lt;/size-kb&gt;
  &lt;/doc&gt;
  &lt;doc&gt;
    &lt;uri uri=&quot;http://www.bbc.co.uk/asset/b53ed8ae-d628-7fbd-e040-850a2c872458/highweb/domestic&quot;/&gt;
    &lt;url href=&quot;/news/front_page&quot;/&gt;
    &lt;size&gt;400339&lt;/size&gt;
    &lt;size-kb&gt;390.9560546875&lt;/size-kb&gt;
  &lt;/doc&gt;
&lt;/v:results&gt;</code></pre></noscript></div>


<h3>Adding a depth attribute to your xml documents</h3>

<hr />

<p>Why is this useful I hear you say, demonstrates how to use xdmp:node-replace and xdmp:node-insert-child</p>

<div><script src='https://gist.github.com/2039314.js?file=adding_a_depth_attribute_to_elements.xqy'></script>
<noscript><pre><code>let $sitemap := doc('/sitemap/sport-v6/highweb/domestic/sitemap.xml')
  for $node in $sitemap//*:node
  let $depth := count($node/ancestor::*)
return
  if($node/@depth != '')
    then (xdmp:node-replace($node/@depth, attribute depth {$depth -1}))
    else (xdmp:node-insert-child($node, attribute depth {$depth -1}))</code></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Evaluating Mark Logic XQuery Performance]]></title>
    <link href="http://JonCook.github.com/blog/2012/02/12/evaluating-mark-logic-xquery-performance/"/>
    <updated>2012-02-12T19:36:00+01:00</updated>
    <id>http://JonCook.github.com/blog/2012/02/12/evaluating-mark-logic-xquery-performance</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently been doing some work building RESTFul API&rsquo;s backed by a Mark Logic XML Content Store utilising XQuery for document retrieval. This post details the steps involved in tuning what was deemed to be the most simplest of queries for optimum performance using some useful Mark Logic extensions for profiling.</p>

<h3>Original Query</h3>

<hr />

<p>XQuery for looking up documents based on the value of a given attribute in the xml using XPath. (What could be simpler!)</p>

<div><script src='https://gist.github.com/1810958.js?file=document_by_url.xqy'></script>
<noscript><pre><code>xquery version &quot;1.0-ml&quot;;

let $public_url := &quot;%s&quot;

let $results := /*[
    /*/itemMeta/url[@href=$public_url]
    ]

let $asset := $results[1]
return $asset</code></pre></noscript></div>


<h3>Evaluating Performance</h3>

<hr />

<p>By default Mark Logic indexes the document structure and attributes <strong>are</strong> indexed by default as part of the universal index.</p>

<h4>1. Adding xdmp:query-meters</h4>

<p>By adding xdmp:query-meters() to the query we get some immediate feedback about how the query performs including elapsed time and the number of fragments and documents that were selected. Altering the above query as below gives us some interesting metrics and the query is taking nearly 2 seconds.</p>

<div><script src='https://gist.github.com/1810958.js?file=document_by_url_with_xdmp_query_meters.xqy'></script>
<noscript><pre><code>return $asset,
xdmp:query-meters()</code></pre></noscript></div>




<div><script src='https://gist.github.com/1810958.js?file=result_of_xdmp_query_meters.xml'></script>
<noscript><pre><code>&lt;qm:elapsed-time&gt;PT1.802604S&lt;/qm:elapsed-time&gt;
&lt;qm:requests&gt;0&lt;/qm:requests&gt;
&lt;qm:list-cache-hits&gt;3&lt;/qm:list-cache-hits&gt;
&lt;qm:list-cache-misses&gt;0&lt;/qm:list-cache-misses&gt;
&lt;qm:in-memory-list-hits&gt;1&lt;/qm:in-memory-list-hits&gt;
&lt;qm:expanded-tree-cache-hits&gt;43762&lt;/qm:expanded-tree-cache-hits&gt;
&lt;qm:documents&gt;</code></pre></noscript></div>


<p>Immediately something looks a bit suspicious as all the documents in the database are being returned which would indicate that the query is not making effective use of Mark Logic&rsquo;s Indexes.</p>

<!-- more -->


<h4>2. Verifying with xdmp:estimate</h4>

<p>This can be verified with xdmp:estimate(), purely focusing on the XPath part of the query e.g.</p>

<div><script src='https://gist.github.com/1810958.js?file=document_by_url_with_xdmp_estimate.xqy'></script>
<noscript><pre><code>return xdmp:estimate(/*[
    /*/itemMeta/url[@href=$public_url]
    ])</code></pre></noscript></div>


<p>The evaluator sees the XPath expression above and uses index lookup&rsquo;s to match some sequence of fragments in the database. xdmp:estimate() gives an estimate of the number of documents in a sequence and is directed at the index-lookup phase, i.e &ldquo;search&rdquo;.</p>

<div><script src='https://gist.github.com/1810958.js?file=result_of_xdmp_estimate.xml'></script>
<noscript><pre><code>&lt;v:results v:warning=&quot;non-element item&quot;&gt;43762&lt;/v:results&gt;</code></pre></noscript></div>


<p>Next, the evaluator will fetch those matching fragment(s), if any, from the database. Now we are back in the evaluation phase. It will check to make sure the nodes really match: this is known as &ldquo;filtering&rdquo;. Then it will evaluate the entire XPath.</p>

<p>So what we are saying for the xquery above is that the number of matching fragments is all the documents in the database which will then get filtered so we are not making use of any of available Mark Logic indexing which means the query is very inefficient.</p>

<h4>3. Looking at the query plan with xdmp:plan</h4>

<p>This further verifies that all the documents in the database are being selected and we are not fully leveraging indexes</p>

<div><script src='https://gist.github.com/1810958.js?file=document_by_url_with_xdmp_plan.xqy'></script>
<noscript><pre><code>return xdmp:plan(/*[
    /*/itemMeta/url[@href=$public_url]
    ])</code></pre></noscript></div>




<div><script src='https://gist.github.com/1810958.js?file=result_of_xdmp_plan.xml'></script>
<noscript><pre><code>&lt;qry:query-plan xmlns:qry=&quot;http://marklogic.com/cts/query&quot;&gt;
  &lt;qry:info-trace&gt;xdmp:eval(&quot;xquery version &amp;amp;quot;1.0-ml&amp;amp;quot;;&amp;amp;#13;&amp;amp;#10;import module namesp...&quot;, (), &amp;lt;options xmlns=&quot;xdmp:eval&quot;&amp;gt;&amp;lt;database&amp;gt;14032772107247300631&amp;lt;/database&amp;gt;&amp;lt;modules&amp;gt;77217792867070...&amp;lt;/options&amp;gt;)&lt;/qry:info-trace&gt;
  &lt;qry:info-trace&gt;Analyzing path: fn:collection()/*[/*/itemMeta/url[@href = &quot;/news/technology&quot;]]&lt;/qry:info-trace&gt;
  &lt;qry:info-trace&gt;Step 1 is searchable: fn:collection()&lt;/qry:info-trace&gt;
  &lt;qry:info-trace&gt;Step 2 is searchable: *[/*/itemMeta/url[@href = &quot;/news/technology&quot;]]&lt;/qry:info-trace&gt;
  &lt;qry:info-trace&gt;Path is fully searchable.&lt;/qry:info-trace&gt;
  &lt;qry:info-trace&gt;Gathering constraints.&lt;/qry:info-trace&gt;
  &lt;qry:info-trace&gt;Executing search.&lt;/qry:info-trace&gt;
  &lt;qry:final-plan&gt;
    &lt;qry:and-query&gt;
      &lt;qry:term-query weight=&quot;0&quot;&gt;
    &lt;qry:key&gt;1458993848217274698&lt;/qry:key&gt;
      &lt;/qry:term-query&gt;
    &lt;/qry:and-query&gt;
  &lt;/qry:final-plan&gt;
  &lt;qry:info-trace&gt;Selected 43762 fragments&lt;/qry:info-trace&gt;
  &lt;qry:result estimate=&quot;43762&quot;/&gt;
&lt;/qry:query-plan&gt;</code></pre></noscript></div>


<h4>Looking at the XPath in more detail</h4>

<p>/* accesses the entire database and returns every root element in the database, but we do it a second time in the predicate which is very expensive.</p>

<p>Changing the XPath to below and re-running the above steps results in a much more positive result, and look how quick the query is!</p>

<div><script src='https://gist.github.com/1810958.js?file=document_by_url_tuned.xqy'></script>
<noscript><pre><code>return collection()[*/itemMeta/url/@href eq $public_url]/*
</code></pre></noscript></div>




<div><script src='https://gist.github.com/1810958.js?file=result_document_by_url_tuned.xml'></script>
<noscript><pre><code>&lt;qm:elapsed-time&gt;PT0.000773S&lt;/qm:elapsed-time&gt;
&lt;v:results v:warning=&quot;non-element item&quot;&gt;1&lt;/v:results&gt;
&lt;qry:info-trace&gt;Step 1 predicate 1 contributed 3 constraints: */itemMeta/url/@href eq &quot;/news/technology&quot;&lt;/qry:info-trace&gt;</code></pre></noscript></div>


<h3>Plugging in xinc:node-expand</h3>

<p>So far we have done our query evaluation ignoring the final piece which is to plugin the marklogic xinc:node-expand function which will resolves any x:includes in the results</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>return xinc:node-expand($asset) </span></code></pre></td></tr></table></div></figure>


<h4>Running the original query using xinc:node-expand</h4>

<p><strong>Not cached &ndash; 6 seconds!!</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;qm:elapsed-time&gt;PT6.05373S&lt;/qm:elapsed-time&gt;</span></code></pre></td></tr></table></div></figure>


<p><strong>Cached &ndash; 2 seconds</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;qm:elapsed-time&gt;PT2.154288S&lt;/qm:elapsed-time&gt;</span></code></pre></td></tr></table></div></figure>


<p>With our new optimised query we can see the time is much reduced below. This is a Mark Logic extension so we can&rsquo;t really do much about the performance of this. However it is interesting to see how much additional time this adds to the processing even for a fully optimised query.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;qm:elapsed-time&gt;PT0.351562S&lt;/qm:elapsed-time&gt;</span></code></pre></td></tr></table></div></figure>


<p>From the above it is easy to see the majority of the query is spent in the xinc:node-expand function but we have increased the overall performance dramatically.</p>

<h4>Conclusion</h4>

<p>Even what is deemed to be the simplest of xquery/xpath expressions might be inefficient. Mark Logic won&rsquo;t tell you how to fix your xquery/xpath but it will provide insight into whether your query is utilizing indexes and how it is actually running.</p>

<h4>Useful Links</h4>

<ul>
<li><a href="http://developer.marklogic.com/blog/learning-with-query-trace">http://developer.marklogic.com/blog/learning-with-query-trace</a></li>
<li><a href="http://developer.marklogic.com/blog/how-to-write-fast-queries">http://developer.marklogic.com/blog/how-to-write-fast-queries</a></li>
<li><a href="http://developer.marklogic.com/pubs/4.2/apidocs/Ext-4.html">http://developer.marklogic.com/pubs/4.2/apidocs/Ext-4.html</a></li>
<li><a href="http://developer.marklogic.com/pubs/4.2/apidocs/Ext-4.html#xdmp:estimate">http://developer.marklogic.com/pubs/4.2/apidocs/Ext-4.html#xdmp:estimate</a></li>
<li><a href="http://xqzone.marklogic.com/pubs/3.2/apidocs/Extension.html#query-meters">http://xqzone.marklogic.com/pubs/3.2/apidocs/Extension.html#query-meters</a></li>
<li><a href="http://developer.marklogic.com/blog/xquery-coding-guidelines">http://developer.marklogic.com/blog/xquery-coding-guidelines</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
